#!/bin/bash
function module_print_help() {
	cat << EOF
`echoBlue "package_name..."`

        Add a package to the current document

EOF
}

function module_load_options() {
	getOpt "(-d|--document)" documentName 1 ""
    return 0
}

#
# Generate LaTex code for the packages and body input
#
function generateLatexInputs() {
    if [ ${#packages[@]} -gt 0 ]; then
        for file in "${packages[@]}"; do
            echo "\input{\"$file\"}"
        done
    fi
}

#
# Generate the LaTex code for the given tag
#
function extractTaggedLines() {
    if [ ${#packages[@]} -eq 0 ]; then
        return
    fi

    for file in "${packages[@]}"; do
        grep "$file" -e "^%${1}\(.${language,,}\)*:.*" \
        | sed -r 's#^%...?.?.?:(.*)$#\1#g'
    done
}

#
# Add a package to list of packages
#   1: Package tex file
#
function addPackage() {
    # avoid duplicates
	if [ ${#packages[@]} -gt 0 ]; then
	    for file in "${packages[@]}"; do
	        if [ "$(basename "$file")" == "$(basename "$1")" ]; then
	            return
	        fi
	    done
	fi

    copyDependenciesFrom "$1"

    test -d "Packages" || mkdir "Packages" || error "Cannot create dir $packages"

    local packageCopy="Packages/$(basename "$1")"
    cp "$1" "$packageCopy"
    packages+=("$packageCopy")
}

function copyDependenciesFrom() {
    local parent="$(dirname "$1")"

    while read -r line; do
        if [[ "$line" =~ ^%de:.* ]]; then
            dependency=`echo "$line" | sed -r 's#^%de:(.*)$#\1#g'`
            dependency="$parent/$dependency"
            test -e "$dependency" || error "Dependency not found: $dependency"
            cp -r "$dependency" .
        fi
    done < "$1"
}

function findPackage() {
    findInDir "$1" "$PACKAGES_DIR" || error "Package not found: $1"
	packageFile="$result"
}

#   1: Query
#   2: Directory to search
function findInDir() {
    for file in "$2/"*; do
        if [ -f "$file" ] && softMatch "$1" "$(basename "$file")"; then
            result="$file"
            return 0
        fi
    done

    return 1
}

#
# Creates the package list from the given list
#
function setPackagesList() {
    for arg in "$@"; do
        findPackage "$arg"
        addPackage "$packageFile"
    done
}

function addInputLines() {
	createTmpFile inputsFile

	generateLatexInputs > "$inputsFile"

	sed -i '/% INPUTS/r '$inputsFile'' "$mainTexFile"

}

function module_run() {
    hasMoreArgs $#

	selectMainFile "$documentName"

	# bodyTexFile="${mainTexFile%.tex}_body.tex"
	# test -f "$bodyTexFile" || error "Body file not found"

	packages=()
	setPackagesList "$@"

	addInputLines
}
