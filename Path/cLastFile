#!/bin/bash

function declareConstants() {
    readonly TARGET_DIRECTORY="$HOME/Downloads/Chrome/"
}

function printHelp() {
    cat << EOF

    Copy, move or delete the last(s) file downloaded from $TARGET_DIRECTORY

    `echoGreen Usage:` $PROGNAME `echoBlue "[ACTION]"` `echoViolet "[-COUNT|-i]"`

    `echoBlue ACTION`: Action to perform. Can be one of:
           `echoBlue "-c|-cp|--copy"`  : Copy here (default)
           `echoBlue "-m|-mv|--move"`  : Move here
           `echoBlue "-t|--trash"`     : Move to trash
           `echoBlue "-r|-rm|--remove"`: Remove from disk
           `echoBlue "-x|--execute"`   : Execute
           `echoBlue "-l|--list"`      : Show last files

    `echoViolet -COUNT`: Number of files to affect (eg. -3).
                         Default is 1, or 10 if used with `echoBlue --list`

    `echoViolet "-i|--interactive"` : Interactivly choose the file to process.

    `echoBlue "-d|--destination"` : Specify the destination for some actions
                       This information can also be piped in

EOF
}


function loadOptions() {
    local defaultCount="-1"
    local count_interactive0
    local count0

    getOpt "-(r|rm|-remove)" act_remove
    getOpt "-(m|mv|-move)" act_move
    getOpt "-(c|cp|-copy)" act_copy
    getOpt "-(t|-trash)" act_trash
    getOpt "-(x|-execute)" act_execute
    getOpt "-(l|-list)" act_list
    getOpt "-(i|--interactive)" count_interactive0

    if $act_list; then
        defaultCount="-10"
    fi
    getOpt "-[0-9]+" count0 OPT "$defaultCount"

    if [ "$count0" == "-0" ]; then
        count_interactive=true
        count="0"
    else
        count_interactive="$count_interactive0"
        count="${count0:1}"
    fi

    return 0
}

function run() {
    changeIFS

    targetDirectory="$TARGET_DIRECTORY"
    outputDir="$PWD"

    if $act_list; then
        if $count_interactive; then
            error "Cannot use interactive mode to list"
        fi

        echo
        local index=0
        local totalSize=0
        local totalCount=0
        local file
        # local size

        for file in `listFiles`; do
            # size=$(stat -c%s "$file")
            # echo `basename "$file"` " : " `human_filesize $size`
            term_display "$file" "$index" "" size
            # echo "S $size"
            index=$((index+1))
            echo
            totalCount=$((totalCount+1))
            totalSize=$((totalSize+size))
        done
        echo
        echoGreen $totalCount -n
        echo -n " files for "
        echoViolet `printSize $totalSize`
        echo


    else
        # if $act_copy || $act_move; then
        #     getOutputDir "$@"
        # fi

        if $count_interactive; then
            local array=(`ls -t "$targetDirectory"*`)
            echo
            browse_array term_display performAction char_accept "${array[@]}"
            echo

            return 0
        else
            files=($(listFiles))
        fi

        for file in "${files[@]}"; do
            performAction "$file"
        done
    fi
}

#
#   Parameters:
#       1: Target file
#       2: Index 0-based
#
function performAction() {
    if $act_copy; then
        cp "$1" "$outputDir" || error "Couldn't copy to $outputDir:\n$1"

        verbose "$(basename $1) copied to $outputDir" -p

    elif $act_move; then
        mv "$1" "$outputDir" || error "Couldn't move to $outputDir:\n$1"

        verbose "$(basename $1) moved to $outputDir" -p

    elif $act_remove; then
        if $(inputYesNo "Do you really want to remove $(basename $1)?"); then
            rm "$1" || error "Couldn't remove $1"

            verbose "$(basename $1) removed" -p
        fi

    elif $act_trash; then
        kioclient move "$1" trash:/ || error "Couldn't move $1 to trash"
        verbose "Moved to TRASH: $(basename $1)" -p

    else
        xdg-open "$1" &

    fi
    return 0
}


function listFiles() {
    ls -t "$targetDirectory"* | head -$count
}


#
#   Parameters:
#       1: File to display to terminal
#       2: Index (0-based) of the file
#       3: Prefix
#
function term_display() {
    local name=`basename "$1"`
    local sizeV=$(stat -c%s "$1")
    local sizeP=`printSize $sizeV`
    local index="$2"
    index=$((index+1))

    echoGreen "$3${index}) " -n
    echoBlue "$name " -n
    echoViolet "$sizeP" -n

    if [ $# -gt 3 ]; then
        # echo "SET $4=$sizeV"
        eval "$4=$sizeV"
    fi
}

function char_accept() {
    return 1
}

source "$SCRIPT_LIB/iArrayBrowser"
source "$SCRIPT_LIB/scriptStarter"
